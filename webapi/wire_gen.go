// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package webapi

import (
	"backend/app/datastore/mysql"
	"backend/app/interactor"
	"backend/app/usecase"
	"backend/database"
	"backend/webapi/app"
	"github.com/google/wire"
	"github.com/shogo82148/goa-v1"
)

// Injectors from wire.go:

// InitializeBearController は BearController の依存関係を初期化します。
func InitializeBearController(service *goa.Service) (*BearController, error) {
	config := mysql.NewMySQLConfig()
	db, err := mysql.New(config)
	if err != nil {
		return nil, err
	}
	bearCreator := mysql.NewBearCreater()
	bearCreatorConfig := &interactor.BearCreatorConfig{
		TxBeginner:  db,
		BearCreator: bearCreator,
	}
	bearCreater := interactor.NewBearCreater(bearCreatorConfig)
	bearGetter := mysql.NewBearGetter()
	bearGetterconfig := &interactor.BearGetterconfig{
		Queryer:    db,
		BearGetter: bearGetter,
	}
	interactorBearGetter := interactor.NewBearGetter(bearGetterconfig)
	bearControllerConfig := NewBearControllerConfig(bearCreater, interactorBearGetter)
	bearController := NewBearController(service, bearControllerConfig)
	return bearController, nil
}

// wire.go:

// WireSet は webapi の依存性を解決するための Wire セット
var WireSet = wire.NewSet(database.NewDB, mysql.NewMySQLConfig, interactor.ConsoleSet, mysql.Set, NewBearControllerConfig,
	NewBearController, wire.Bind(new(app.BearController), new(*BearController)),
)

func NewBearControllerConfig(creater usecase.BearCreator, getter usecase.BearGetter) *BearControllerConfig {
	return &BearControllerConfig{
		creater: creater,
		getter:  getter,
	}
}
