// Code generated by goagen v1.6.2, DO NOT EDIT.
//
// API "BearSighting": Application Contexts
//
// Command:
// $ main

package app

import (
	"context"
	goa "github.com/shogo82148/goa-v1"
	"net/http"
)

// AddBearContext provides the bear add action context.
type AddBearContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *AddBearPayload
}

// NewAddBearContext parses the incoming request URL and body, performs validations and creates the
// context used by the bear controller add action.
func NewAddBearContext(ctx context.Context, r *http.Request, service *goa.Service) (*AddBearContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := AddBearContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// addBearPayload is the bear add action payload.
type addBearPayload struct {
	// 目撃場所の具体的な住所
	Address *string `form:"address,omitempty" json:"address,omitempty" yaml:"address,omitempty" xml:"address,omitempty"`
	// 目撃があった市区町村
	City *string `form:"city,omitempty" json:"city,omitempty" yaml:"city,omitempty" xml:"city,omitempty"`
	// 目撃日 (ISO 8601フォーマット)
	Date *string `form:"date,omitempty" json:"date,omitempty" yaml:"date,omitempty" xml:"date,omitempty"`
	// 目撃の追加詳細や説明
	Details *string `form:"details,omitempty" json:"details,omitempty" yaml:"details,omitempty" xml:"details,omitempty"`
	// 目撃場所の緯度
	Latitude *float64 `form:"latitude,omitempty" json:"latitude,omitempty" yaml:"latitude,omitempty" xml:"latitude,omitempty"`
	// 目撃場所の経度
	Longitude *float64 `form:"longitude,omitempty" json:"longitude,omitempty" yaml:"longitude,omitempty" xml:"longitude,omitempty"`
	// 目撃時刻 (24時間形式 HH:MM)
	Time *string `form:"time,omitempty" json:"time,omitempty" yaml:"time,omitempty" xml:"time,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *addBearPayload) Validate() (err error) {
	if payload.Latitude == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "latitude"))
	}
	if payload.Longitude == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "longitude"))
	}
	if payload.City == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "city"))
	}
	if payload.Address == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "address"))
	}
	if payload.Date == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "date"))
	}
	if payload.Time == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "time"))
	}
	if payload.Details == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "details"))
	}
	return
}

// Publicize creates AddBearPayload from addBearPayload
func (payload *addBearPayload) Publicize() *AddBearPayload {
	var pub AddBearPayload
	if payload.Address != nil {
		pub.Address = *payload.Address
	}
	if payload.City != nil {
		pub.City = *payload.City
	}
	if payload.Date != nil {
		pub.Date = *payload.Date
	}
	if payload.Details != nil {
		pub.Details = *payload.Details
	}
	if payload.Latitude != nil {
		pub.Latitude = *payload.Latitude
	}
	if payload.Longitude != nil {
		pub.Longitude = *payload.Longitude
	}
	if payload.Time != nil {
		pub.Time = *payload.Time
	}
	return &pub
}

// AddBearPayload is the bear add action payload.
type AddBearPayload struct {
	// 目撃場所の具体的な住所
	Address string `form:"address" json:"address" yaml:"address" xml:"address"`
	// 目撃があった市区町村
	City string `form:"city" json:"city" yaml:"city" xml:"city"`
	// 目撃日 (ISO 8601フォーマット)
	Date string `form:"date" json:"date" yaml:"date" xml:"date"`
	// 目撃の追加詳細や説明
	Details string `form:"details" json:"details" yaml:"details" xml:"details"`
	// 目撃場所の緯度
	Latitude float64 `form:"latitude" json:"latitude" yaml:"latitude" xml:"latitude"`
	// 目撃場所の経度
	Longitude float64 `form:"longitude" json:"longitude" yaml:"longitude" xml:"longitude"`
	// 目撃時刻 (24時間形式 HH:MM)
	Time string `form:"time" json:"time" yaml:"time" xml:"time"`
}

// Validate runs the validation rules defined in the design.
func (payload *AddBearPayload) Validate() (err error) {

	return
}

// Created sends a HTTP response with status code 201.
func (ctx *AddBearContext) Created(r *Sighting) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 201, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *AddBearContext) BadRequest() error {
	ctx.ResponseData.WriteHeader(400)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *AddBearContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// GetBearContext provides the bear get action context.
type GetBearContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ID string
}

// NewGetBearContext parses the incoming request URL and body, performs validations and creates the
// context used by the bear controller get action.
func NewGetBearContext(ctx context.Context, r *http.Request, service *goa.Service) (*GetBearContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := GetBearContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramID := req.Params["id"]
	if len(paramID) > 0 {
		rawID := paramID[0]
		rctx.ID = rawID
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *GetBearContext) OK(r *Sighting) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *GetBearContext) BadRequest() error {
	ctx.ResponseData.WriteHeader(400)
	return nil
}

// NotFound sends a HTTP response with status code 404.
func (ctx *GetBearContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *GetBearContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}
