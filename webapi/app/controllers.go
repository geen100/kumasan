// Code generated by goagen v1.6.2, DO NOT EDIT.
//
// API "BearSighting": Application Controllers
//
// Command:
// $ main

package app

import (
	"context"
	goa "github.com/shogo82148/goa-v1"
	"net/http"
)

// initService sets up the service encoders, decoders and mux.
func initService(service *goa.Service) {
	// Setup encoders and decoders
	service.Encoder.Register(goa.NewJSONEncoder, "application/json")
	service.Decoder.Register(goa.NewJSONDecoder, "application/json")

	// Setup default encoder and decoder
	service.Encoder.Register(goa.NewJSONEncoder, "*/*")
	service.Decoder.Register(goa.NewJSONDecoder, "*/*")
}

// BearController is the controller interface for the Bear actions.
type BearController interface {
	goa.Muxer
	Add(*AddBearContext) error
	Get(*GetBearContext) error
}

// MountBearController "mounts" a Bear resource controller on the given service.
func MountBearController(service *goa.Service, ctrl BearController) {
	initService(service)
	var h goa.Handler

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewAddBearContext(ctx, req, service)
		if err != nil {
			return err
		}
		// Build the payload
		if rawPayload := goa.ContextRequest(ctx).Payload; rawPayload != nil {
			rctx.Payload = rawPayload.(*AddBearPayload)
		} else {
			return goa.MissingPayloadError()
		}
		return ctrl.Add(rctx)
	}
	service.Mux.Handle("POST", "/bear/", ctrl.MuxHandler("add", h, unmarshalAddBearPayload))
	service.LogInfo("mount", "ctrl", "Bear", "action", "Add", "route", "POST /bear/")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewGetBearContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Get(rctx)
	}
	service.Mux.Handle("GET", "/bear/:id", ctrl.MuxHandler("get", h, nil))
	service.LogInfo("mount", "ctrl", "Bear", "action", "Get", "route", "GET /bear/:id")
}

// unmarshalAddBearPayload unmarshals the request body into the context request data Payload field.
func unmarshalAddBearPayload(ctx context.Context, service *goa.Service, req *http.Request) error {
	payload := &addBearPayload{}
	if err := service.DecodeRequest(req, payload); err != nil {
		return err
	}
	if err := payload.Validate(); err != nil {
		// Initialize payload with private data structure so it can be logged
		goa.ContextRequest(ctx).Payload = payload
		return err
	}
	goa.ContextRequest(ctx).Payload = payload.Publicize()
	return nil
}
